{"version":3,"sources":["../../api/test/test.js"],"names":["chai","use","chatHttp","expect","describe","it","done","contact","firstname","lastname","zip","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","id","get","should","have","property","contactId","eql","updatedContact","put"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../index';\n\nchai.use(chatHttp)\nconst { expect } = chai;\n\ndescribe('Testing contact endpoints', () => {\n    it('It should create a contact', (done) => {\n        const contact = {\n            firstname: 'Hannah',\n            lastname: 'Werman',\n            zip: 60175,\n            email: 'hannah.werman@gmail.com',\n        };\n        chai.request(app)\n            .post('/api/v1/contacts')\n            .set('Accept', 'application/json')\n            .send(contact)\n            .end((err, res) => {\n                expect(res.status).to.equal(201);\n                expect(res.body.data).to.include({\n                    id: 1,\n                    firstname: contact.firstname,\n                    lastname: contact.lastname,\n                    zip: contact.zip,\n                    email: contact.email\n                });\n                done();\n            });\n    });\n\n    it('It should not create a contact with incomplete parameters', (done) => {\n        const contact = {\n            firstname: \"Hannah\",\n            zip: 60175\n        };\n        chai.request(app)\n            .post('/api/v1/contacts')\n            .set('Accept', 'application/json')\n            .send(contact)\n            .end((err, res) => {\n                expect(res.status).to.equal(400);\n                done();\n            });\n    });\n\n    it('It should get all contacts', (done) => {\n        chai.request(app)\n            .get('/api/v1/contacts')\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(200);\n                res.body.data[0].should.have.property('id');\n                res.body.data[0].should.have.property('firstname');\n                res.body.data[0].should.have.property('lastname');\n                res.body.data[0].should.have.property('zip');\n                res.body.data[0].should.have.property('email');\n                done();\n            });\n    });\n\n    it('It should get a particular contact', (done) => {\n        const contactId = 1;\n        chai.request(app)\n            .get(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(200);\n                res.body.data.should.have.property('id');\n                res.body.data.should.have.property('firstname');\n                res.body.data.should.have.property('lastname');\n                res.body.data.should.have.property('zip');\n                res.body.data.should.have.property('email');\n                done();\n            }); \n    });\n\n    it('It should not get a contact with an invalid id', (done) => {\n        const contactId = 8888;\n        chai.request(app)\n            .get(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(404);\n                res.body.should.have.property('message').eql(`Cannot find contact with the id ${contactId}`)\n                done();\n            });\n    });\n\n    it('It should not get a book with a non-numeric id', (done) => {\n        const contactId = 'aaa';\n        chai.request(app)\n            .get(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(400);\n                res.body.should.have.property('message').eql('Please input a valid numeric value');\n                done();\n            });\n    });\n\n    it('It should update a contact', (done) => {\n        const contactId = 1;\n        const updatedContact = {\n            id: contactId,\n            firstname: \"Not Hannah\",\n            lastname: \"Werman\",\n            zip: 60175,\n            email: 'email@email.com'\n        };\n        chai.request(app)\n            .put(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .send(updatedContact)\n            .end((err, res) => {\n                expect(res.status).to.equal(200);\n                expect(res.body.data.id).equal(updatedContact.id);\n                expect(res.body.data.firstname).equal(updatedContact.firstname);\n                expect(res.body.data.lastname).equal(updatedContact.lastname);\n                expect(res.body.data.zip).equal(updatedContact.zip);\n                expect(res.body.data.email).equal(updatedContact.email);\n                done();\n            });\n    });\n\n    it('It should not update a contact with invalid id', (done) => {\n        const contactId = 9999;\n        const updatedContact = {\n            id: contactId,\n            firstname: \"Not Hannah\",\n            lastname: \"Werman\",\n            zip: 60175,\n            email: 'email@email.com'\n        };\n        chai.request(app)\n            .put(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .send(updatedContact)\n            .end((err, res) => {\n                expect(res.status).to.equal(404);\n                res.body.should.have.property('message').eql(`Cannot find contact with the id ${contactId}`);\n                done();\n            });\n    });\n\n    it('It should not update a contact with a non-numeric id value', (done) => {\n        const contactId = 'aaa';\n        const updatedContact = {\n            id: contactId,\n            firstname: \"Not Hannah\",\n            lastname: \"Werman\",\n            zip: 60175,\n            email: 'email@email.com'\n        };\n        chai.request(app)\n            .put(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .send(updatedContact)\n            .end((err, res) => {\n                expect(res.status).to.equal(400);\n                res.body.should.have.property('message').eql(`Please input a valid numeric value`);\n                done();\n            });\n    });\n\n    it('It should delete a contact', (done) => {\n        const contactId = 1;\n        chai.request(app)\n            .delete(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(200);\n                expect(res.body.data).to.include({});\n                done();\n            });\n    });\n\n    it('It should not delete a contact with invalid id', (done) => {\n        const contactId = 9999;\n        chai.request(app)\n            .delete(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(404);\n                res.body.should.have.property('message').eql(`Contact with the id ${contactId} cannot be found`);\n                done();\n            }); \n    });\n\n    it('It should not delete a contact with non-numeric id', (done) => {\n        const contactId = 'aaa';\n        chai.request(app)\n            .delete(`/api/v1/contacts/${contactId}`)\n            .set('Accept', 'application/json')\n            .end((err, res) => {\n                expect(res.status).to.equal(400);\n                res.body.should.have.property('message').eql(`Please provide a numeric value`);\n                done();\n            });\n    });\n})"],"file":"test.js"}